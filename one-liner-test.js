// 🚀 ONE-LINER SCRIPT - Copy and paste this into browser console

// Test all models and get results
(async()=>{console.log('🎯 Testing Puter.js models...');const r={current:{working:[],failed:[]},new:{working:[],failed:[]}};const testModel=async(model,name)=>{try{const result=await callPuter({model,messages:[{role:'user',content:'Test - say OK'}]});return result.error?{success:false,error:result.error}:{success:true,response:result.text}}catch(e){return{success:false,error:e.message}}};const current=[['','default'],['claude','claude'],['gpt-4.1-nano','gpt-4.1-nano']];const target=['deepseek','deepseek-chat','deepseek-coder','gemini','gemini-pro','grok'];console.log('Testing current models...');for(const[model,name]of current){const result=await testModel(model,name);if(result.success){console.log(`✅ ${name}`);r.current.working.push(name)}else{console.log(`❌ ${name}: ${result.error}`);r.current.failed.push(name)}await new Promise(resolve=>setTimeout(resolve,1000))}console.log('Testing target models...');for(const model of target){const result=await testModel(model,model);if(result.success){console.log(`✅ ${model}`);r.new.working.push(model)}else{console.log(`❌ ${model}: ${result.error}`);r.new.failed.push(model)}await new Promise(resolve=>setTimeout(resolve,1500))}console.log('\n🎉 RESULTS:');console.log(`Current working: ${r.current.working.length}`);console.log(`New working: ${r.new.working.length}`);console.log('Working models:',r.new.working);if(r.new.working.length>0){console.log('\n📝 Add to models.ts:');r.new.working.forEach(model=>{const good=model.includes('deepseek')||model.includes('grok')||model==='gemini-pro';console.log(`  {id:'puter-${model}',label:'${model.charAt(0).toUpperCase()+model.slice(1)} (Puter)',provider:'puter',model:'${model}',free:true${good?',good:true':''}},`)})}window.testResults=r;return r})();